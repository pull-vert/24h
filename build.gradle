import org.jetbrains.kotlin.config.KotlinCompilerVersion

buildscript {
    ext {
        jjwt_version = '0.9.1'
        commonmark_version = '0.12.1'
        jaxb_version = '2.3.1'
        kotlin_logging_version = '1.6.26'
    }
    repositories {
        mavenCentral()
    }
}

plugins {
    id('org.jetbrains.kotlin.jvm') version '1.3.21'
    id('org.jetbrains.kotlin.plugin.spring') version '1.3.21'
    id('io.spring.dependency-management') version '1.0.7.RELEASE'
    id('org.springframework.boot') version '2.1.4.RELEASE'
    id('org.asciidoctor.convert') version '1.5.9.2'
}

println("Using Gradle version: $gradle.gradleVersion")
println("Using Kotlin compiler version: $KotlinCompilerVersion.VERSION")

group = 'com.oaat'
version = '0.0.1-SNAPSHOT'

sourceCompatibility = JavaVersion.VERSION_12
targetCompatibility = JavaVersion.VERSION_12

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ["-Xjsr305=strict"]
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ["-Xjsr305=strict"]
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-data-mongodb-reactive') {
        exclude group: 'org.mongodb', module: 'mongodb-driver'
        exclude group: 'org.mongodb', module: 'mongodb-driver-core'
        exclude group: 'org.mongodb', module: 'bson'
    }
    // uber jar that works with java 9 module, checks dependencies and remove this hack
    // and exclusions above when updated spring-boot-starter-data-mongodb-reactive is ok
    compile('org.mongodb:mongo-java-driver')
    compile('org.springframework.boot:spring-boot-starter-webflux')
    compile('com.fasterxml.jackson.module:jackson-module-kotlin')
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    compile("org.jetbrains.kotlin:kotlin-reflect")
    compile('de.flapdoodle.embed:de.flapdoodle.embed.mongo')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile("io.jsonwebtoken:jjwt:$jjwt_version")
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile("com.atlassian.commonmark:commonmark:$commonmark_version")
    compile("com.atlassian.commonmark:commonmark-ext-autolink:$commonmark_version")
    // removed from java 11, now requires explicit dependency. Required by jjwt
    compile("javax.xml.bind:jaxb-api:$jaxb_version")
    compile("io.github.microutils:kotlin-logging:$kotlin_logging_version")

    runtime('org.springframework.boot:spring-boot-devtools')

    asciidoctor('org.springframework.restdocs:spring-restdocs-asciidoctor')

    testCompile('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'junit', module: 'junit'
    }
    testCompile('io.projectreactor:reactor-test')
    testCompile('org.junit.jupiter:junit-jupiter-params')
    testCompile('org.mockito:mockito-junit-jupiter')
    testImplementation('org.junit.jupiter:junit-jupiter-api')
    testRuntime('org.junit.jupiter:junit-jupiter-engine')
    testCompile('org.springframework.restdocs:spring-restdocs-webtestclient')
    // EL is needed to document Constraints with spring-restdocs
    testCompile('org.glassfish:javax.el')
}

ext {
    snippetsDir = file('build/generated-snippets')
    moduleName = 'oaat'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

afterEvaluate {
    compileJava {
        inputs.property("moduleName", moduleName)
        doFirst {
            options.compilerArgs = [
                    '--module-path', classpath.asPath,
                    '--patch-module', "$moduleName=" + files(sourceSets.main.resources.srcDirs).asPath,
            ]
            classpath = files()
        }
    }
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

bootJar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

// execute ./gradlew wrapper then remove .gradle directory when version change
wrapper {
    gradleVersion='5.3.1'
    distributionType=Wrapper.DistributionType.ALL
}
